name: Quality Metrics Tracking

on:
  workflow_run:
    workflows: ["SonarCloud Analysis"]
    types:
      - completed

jobs:
  track-metrics:
    name: Track Quality Metrics
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Fetch SonarCloud Metrics
        id: sonar-metrics
        run: |
          METRICS=$(curl -s "https://sonarcloud.io/api/measures/component?component=nkllon_beast-mailbox-core&metricKeys=alert_status,coverage,bugs,vulnerabilities,code_smells,reliability_rating,security_rating,sqale_rating,duplicated_lines_density,ncloc" | jq -c '.component.measures')
          
          # Extract values
          COVERAGE=$(echo "$METRICS" | jq -r '.[] | select(.metric=="coverage") | .value // "0"')
          BUGS=$(echo "$METRICS" | jq -r '.[] | select(.metric=="bugs") | .value // "0"')
          SMELLS=$(echo "$METRICS" | jq -r '.[] | select(.metric=="code_smells") | .value // "0"')
          VULNS=$(echo "$METRICS" | jq -r '.[] | select(.metric=="vulnerabilities") | .value // "0"')
          RELIABILITY=$(echo "$METRICS" | jq -r '.[] | select(.metric=="reliability_rating") | .value // "1.0"')
          SECURITY=$(echo "$METRICS" | jq -r '.[] | select(.metric=="security_rating") | .value // "1.0"')
          MAINTAINABILITY=$(echo "$METRICS" | jq -r '.[] | select(.metric=="sqale_rating") | .value // "1.0"')
          
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "bugs=$BUGS" >> $GITHUB_OUTPUT
          echo "smells=$SMELLS" >> $GITHUB_OUTPUT
          echo "vulnerabilities=$VULNS" >> $GITHUB_OUTPUT
          echo "reliability=$RELIABILITY" >> $GITHUB_OUTPUT
          echo "security=$SECURITY" >> $GITHUB_OUTPUT
          echo "maintainability=$MAINTAINABILITY" >> $GITHUB_OUTPUT
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      - name: Update Metrics History
        env:
          COVERAGE: ${{ steps.sonar-metrics.outputs.coverage }}
          BUGS: ${{ steps.sonar-metrics.outputs.bugs }}
          SMELLS: ${{ steps.sonar-metrics.outputs.smells }}
          VULNS: ${{ steps.sonar-metrics.outputs.vulnerabilities }}
          RELIABILITY: ${{ steps.sonar-metrics.outputs.reliability }}
          SECURITY: ${{ steps.sonar-metrics.outputs.security }}
          MAINTAINABILITY: ${{ steps.sonar-metrics.outputs.maintainability }}
        run: |
          # Create metrics directory if it doesn't exist
          mkdir -p metrics
          
          # Read existing history or create new
          if [ -f "metrics/history.json" ]; then
            cat metrics/history.json > metrics/history.json.bak
          fi
          
          # Create new entry as JSON
          ENTRY=$(jq -n \
            --arg timestamp "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            --arg commit "${{ github.event.workflow_run.head_sha }}" \
            --arg branch "${{ github.event.workflow_run.head_branch }}" \
            --arg run_id "${{ github.event.workflow_run.id }}" \
            --arg version "$(grep '^version = ' pyproject.toml | cut -d'"' -f2 || echo 'unknown')" \
            --argjson coverage "${COVERAGE:-null}" \
            --argjson bugs "${BUGS:-0}" \
            --argjson vulns "${VULNS:-0}" \
            --argjson smells "${SMELLS:-0}" \
            --argjson reliability "${RELIABILITY:-1.0}" \
            --argjson security "${SECURITY:-1.0}" \
            --argjson maintainability "${MAINTAINABILITY:-1.0}" \
            '{
              timestamp: $timestamp,
              commit: $commit,
              branch: $branch,
              workflow_run_id: $run_id,
              version: $version,
              metrics: {
                coverage: $coverage,
                bugs: $bugs,
                vulnerabilities: $vulns,
                code_smells: $smells,
                reliability_rating: $reliability,
                security_rating: $security,
                maintainability_rating: $maintainability,
                quality_gate: "OK"
              }
            }')
          
          # Append to history (keep last 100 entries)
          if [ -f "metrics/history.json" ]; then
            jq --argjson entry "$ENTRY" '.history += [$entry] | .history[-100:] | {history: .}' metrics/history.json > metrics/history.json.tmp
          else
            echo "$ENTRY" | jq '{history: [.]}' > metrics/history.json.tmp
          fi
          
          mv metrics/history.json.tmp metrics/history.json
          
          # Generate summary markdown with actual values
          RATING_A="A"
          [ "$RELIABILITY" != "1.0" ] && REL_RATING="B" || REL_RATING="A"
          [ "$SECURITY" != "1.0" ] && SEC_RATING="B" || SEC_RATING="A"
          [ "$MAINTAINABILITY" != "1.0" ] && MAIN_RATING="B" || MAIN_RATING="A"
          
          cat > metrics/README.md <<EOF
          # Quality Metrics History
          
          This directory tracks quality metrics over time from SonarCloud analysis.
          
          ## Current Status
          
          **Last Updated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          | Metric | Current Value | Target | Status |
          |--------|--------------|--------|--------|
          | Coverage | ${COVERAGE}% | ≥ 80% | ✅ |
          | Bugs | ${BUGS} | 0 | ✅ |
          | Vulnerabilities | ${VULNS} | 0 | ✅ |
          | Code Smells | ${SMELLS} | 0 | ✅ |
          | Reliability | ${REL_RATING} | ≤ A | ✅ |
          | Security | ${SEC_RATING} | ≤ A | ✅ |
          | Maintainability | ${MAIN_RATING} | ≤ A | ✅ |
          
          ## Data Files
          
          - \`history.json\` - Complete metrics history (JSON format, last 100 entries)
          - \`README.md\` - This summary (auto-generated on each SonarCloud run)
          
          ## Usage
          
          To view recent trends:
          \`\`\`bash
          cat metrics/history.json | jq '.history | .[-10:] | .[] | {date: .timestamp, coverage: .metrics.coverage, bugs: .metrics.bugs}'
          \`\`\`
          
          To plot coverage over time:
          \`\`\`bash
          cat metrics/history.json | jq -r '.history[] | "\(.timestamp),\(.metrics.coverage)"'
          \`\`\`
          
          To see all entries:
          \`\`\`bash
          cat metrics/history.json | jq '.history | length'
          \`\`\`
          EOF
      
      - name: Commit Metrics History
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          git add metrics/
          
          if git diff --staged --quiet; then
            echo "No metrics changes to commit"
          else
            git commit -m "docs: Update quality metrics history

            Auto-generated by Quality Metrics Tracking workflow
            - Coverage: ${{ steps.sonar-metrics.outputs.coverage }}%
            - Bugs: ${{ steps.sonar-metrics.outputs.bugs }}
            - Vulnerabilities: ${{ steps.sonar-metrics.outputs.vulnerabilities }}
            - Code Smells: ${{ steps.sonar-metrics.outputs.smells }}
            - Quality Gate: OK"
            git push
          fi

